// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: grpc/proto/navitaire.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NavitaireService_GetStations_FullMethodName = "/navitaire.NavitaireService/GetStations"
)

// NavitaireServiceClient is the client API for NavitaireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavitaireServiceClient interface {
	GetStations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStationsResponse, error)
}

type navitaireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNavitaireServiceClient(cc grpc.ClientConnInterface) NavitaireServiceClient {
	return &navitaireServiceClient{cc}
}

func (c *navitaireServiceClient) GetStations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStationsResponse, error) {
	out := new(GetStationsResponse)
	err := c.cc.Invoke(ctx, NavitaireService_GetStations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NavitaireServiceServer is the server API for NavitaireService service.
// All implementations must embed UnimplementedNavitaireServiceServer
// for forward compatibility
type NavitaireServiceServer interface {
	GetStations(context.Context, *emptypb.Empty) (*GetStationsResponse, error)
	mustEmbedUnimplementedNavitaireServiceServer()
}

// UnimplementedNavitaireServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNavitaireServiceServer struct {
}

func (UnimplementedNavitaireServiceServer) GetStations(context.Context, *emptypb.Empty) (*GetStationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStations not implemented")
}
func (UnimplementedNavitaireServiceServer) mustEmbedUnimplementedNavitaireServiceServer() {}

// UnsafeNavitaireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavitaireServiceServer will
// result in compilation errors.
type UnsafeNavitaireServiceServer interface {
	mustEmbedUnimplementedNavitaireServiceServer()
}

func RegisterNavitaireServiceServer(s grpc.ServiceRegistrar, srv NavitaireServiceServer) {
	s.RegisterService(&NavitaireService_ServiceDesc, srv)
}

func _NavitaireService_GetStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavitaireServiceServer).GetStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NavitaireService_GetStations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavitaireServiceServer).GetStations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NavitaireService_ServiceDesc is the grpc.ServiceDesc for NavitaireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NavitaireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "navitaire.NavitaireService",
	HandlerType: (*NavitaireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStations",
			Handler:    _NavitaireService_GetStations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/navitaire.proto",
}
