// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: grpc/proto/navblue.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NavblueService_FlightById_FullMethodName = "/navblue.NavblueService/FlightById"
)

// NavblueServiceClient is the client API for NavblueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavblueServiceClient interface {
	FlightById(ctx context.Context, in *FlightByIdRequest, opts ...grpc.CallOption) (*FlightByIdResponse, error)
}

type navblueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNavblueServiceClient(cc grpc.ClientConnInterface) NavblueServiceClient {
	return &navblueServiceClient{cc}
}

func (c *navblueServiceClient) FlightById(ctx context.Context, in *FlightByIdRequest, opts ...grpc.CallOption) (*FlightByIdResponse, error) {
	out := new(FlightByIdResponse)
	err := c.cc.Invoke(ctx, NavblueService_FlightById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NavblueServiceServer is the server API for NavblueService service.
// All implementations must embed UnimplementedNavblueServiceServer
// for forward compatibility
type NavblueServiceServer interface {
	FlightById(context.Context, *FlightByIdRequest) (*FlightByIdResponse, error)
	mustEmbedUnimplementedNavblueServiceServer()
}

// UnimplementedNavblueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNavblueServiceServer struct {
}

func (UnimplementedNavblueServiceServer) FlightById(context.Context, *FlightByIdRequest) (*FlightByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlightById not implemented")
}
func (UnimplementedNavblueServiceServer) mustEmbedUnimplementedNavblueServiceServer() {}

// UnsafeNavblueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavblueServiceServer will
// result in compilation errors.
type UnsafeNavblueServiceServer interface {
	mustEmbedUnimplementedNavblueServiceServer()
}

func RegisterNavblueServiceServer(s grpc.ServiceRegistrar, srv NavblueServiceServer) {
	s.RegisterService(&NavblueService_ServiceDesc, srv)
}

func _NavblueService_FlightById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavblueServiceServer).FlightById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NavblueService_FlightById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavblueServiceServer).FlightById(ctx, req.(*FlightByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NavblueService_ServiceDesc is the grpc.ServiceDesc for NavblueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NavblueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "navblue.NavblueService",
	HandlerType: (*NavblueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlightById",
			Handler:    _NavblueService_FlightById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/navblue.proto",
}
