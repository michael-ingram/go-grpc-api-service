package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"go-api-service/graph/model"
)

// Flight is the resolver for the flight field.
func (r *queryResolver) Flight(ctx context.Context, uniqueID string) (*model.Flight, error) {
	// Call the gRPC service to get the flight information
	resp, err := r.NavblueClient.GetFlightById(ctx, uniqueID)
	if err != nil {
		return nil, err
	}

	flight := &model.Flight{
		UniqueID:                  resp.UniqueId,
		FlightNumber:              resp.FlightNumber,
		TailNumber:                resp.TailNumber,
		ScheduledDepartureAirport: resp.ScheduledDepartureAirport,
		ScheduledArrivalAirport:   resp.ScheduledArrivalAirport,
		Std:                       resp.Std,
		Sta:                       resp.Sta,
		OffsetDa:                  resp.OffsetDa,
		OffsetAa:                  resp.OffsetAa,
		DepartureGate:             resp.DepartureGate,
		ActualTimes: &model.ActualTimes{
			ActualBlockOff:  resp.ActualTimes.ActualBlockOff,
			ActualTakeOff:   resp.ActualTimes.ActualTakeOff,
			ActualTouchDown: resp.ActualTimes.ActualTouchDown,
			ActualBlockOn:   resp.ActualTimes.ActualBlockOn,
		},
		EstimatedTimes: &model.EstimatedTimes{
			EstimatedBlockOff:  resp.EstimatedTimes.EstimatedBlockOff,
			EstimatedTakeOff:   resp.EstimatedTimes.EstimatedTakeOff,
			EstimatedTouchDown: resp.EstimatedTimes.EstimatedTouchDown,
			EstimatedBlockOn:   resp.EstimatedTimes.EstimatedBlockOn,
		},
		Delays: mapDelays(resp.Delays),
		Fuels:  mapFuels(resp.Fuels),
	}

	return flight, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
